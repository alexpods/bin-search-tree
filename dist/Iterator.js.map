{"version":3,"sources":["Iterator.js"],"names":["BinarySearchTreeIterator$674","tree$676","type$677","Error","this","_tree","_type","_last","_up","_im","_done","BinarySearchTreeIteratorResult$675","value$682","done$683","value","done","module","exports","prototype","next","undefined","tree$678","node$679","res$680","_traverse","from","steps","_ff","t$681","v","k","Symbol","iterator"],"mappings":"AAOA,QAASA,8BAA6BC,EAAUC,GAE5C,GADAA,EAAWA,GAAY,IACN,MAAbA,GAAiC,MAAbA,GAAiC,MAAbA,EACxC,KAAM,IAAIC,OAAM,+CAAiDD,EAAW,KAEhFE,MAAKC,MAAQJ,EACbG,KAAKE,MAAQJ,EACbE,KAAKG,MAAQ,KACbH,KAAKI,KAAM,EACXJ,KAAKK,KAAM,EACXL,KAAKM,OAAQ,EAkDjB,QAASC,oCAAmCC,EAAWC,GACnDT,KAAKU,MAAQF,EACbR,KAAKW,KAAOF,EArEhBG,OAAOC,QAAUjB,6BA0BjBA,6BAA6BkB,UAAUC,KAAO,WAC1C,GAAIf,KAAKM,MACL,MAAO,IAAIC,oCAAmCS,QAAW,EAE7D,IAAIC,GAAWjB,KAAKC,MAChBiB,EAAWlB,KAAKG,MAChBgB,EAAUF,EAASG,WACfC,KAAMH,EACNI,MAAO,EACPC,KAAK,EACLnB,IAAKJ,KAAKI,IACVC,IAAKL,KAAKK,KAElB,KAAKc,EAED,MADAnB,MAAKM,OAAQ,EACN,GAAIC,oCAAmCS,QAAW,EAE7DhB,MAAKG,MAAQe,EAAWC,EAAQ,GAChCnB,KAAKI,IAAMe,EAAQ,GACnBnB,KAAKK,IAAMc,EAAQ,EACnB,IAAIK,GAAQxB,KAAKE,KACjB,OAAO,IAAIK,oCAA6C,MAAViB,GAAiBN,EAASO,GAAe,MAAVD,GAAiBN,EAASQ,GAAe,MAAVF,IACxGN,EAASQ,EACTR,EAASO,IACV,IAOP7B,6BAA6BkB,UAAUa,OAAOC,UAAY,WACtD,MAAO5B","file":"Iterator.js","sourceRoot":"/source/","sourcesContent":["module.exports = BinarySearchTreeIterator;\n\n/**\n * Binary search tree iterator\n *\n * @param tree Binary Search tree\n * @constructor\n */\nfunction BinarySearchTreeIterator(tree, type) {\n    type = type || 'v';\n\n    if (type !== 'k' && type !== 'v' && type !== 'e') {\n        throw new Error('Incorrect binary search tree iterator type \"' + type + '\"!');\n    }\n\n    this._tree = tree;\n    this._type = type;\n    this._last = null;\n    this._up   = false;\n    this._im   = false;\n    this._done = false;\n}\n\n/**\n * Iterates to the next node and returns its value.\n *\n * @returns Object of { value: , done } where:\n *              * value: value of the next node\n *              * done:  true if the next node is last, false otherwise\n */\nBinarySearchTreeIterator.prototype.next = function() {\n    if (this._done) {\n        return new BinarySearchTreeIteratorResult(undefined, true);\n    }\n\n    var tree = this._tree;\n    var node = this._last;\n\n    var res = tree._traverse({ from: node, steps: 1, _ff: true, _up: this._up, _im: this._im });\n\n    if (!res) {\n        this._done = true;\n        return new BinarySearchTreeIteratorResult(undefined, true);\n    }\n\n    this._last = node = res[0];\n    this._up   = res[2];\n    this._im   = res[3];\n\n    var t = this._type;\n\n    return new BinarySearchTreeIteratorResult(\n        (t === 'v' && node.v) || (t === 'k' && node.k) || (t === 'e' && [node.k, node.v]),\n        false\n    );\n};\n\n/**\n* Iterator must return itself as its iterator\n*\n* @returns this iterator\n*/\nBinarySearchTreeIterator.prototype[Symbol.iterator] = function() {\n    return this;\n};\n\n\n/**\n * Result of binary search tree iteration\n *\n * @param value\n * @param done\n * @constructor\n */\nfunction BinarySearchTreeIteratorResult(value, done) {\n    this.value = value;\n    this.done  = done;\n}"]}