{"version":3,"sources":["Iterator.js"],"names":["BinarySearchTreeIterator$675","tree$676","type$677","Error","this","_type","_tree","_last","_done","module","exports","IteratorResult$674","require","global","Symbol","prototype","iterator","next","undefined","node$678","type$679","min","_min"],"mappings":"AASA,QAASA,8BAA6BC,EAAUC,GAE5C,GADAA,EAAWA,GAAY,IACN,MAAbA,GAAiC,MAAbA,GAAiC,MAAbA,EACxC,KAAM,IAAIC,OAAM,+CAAiDD,EAAW,KAEhFE,MAAKC,MAAQH,EACbE,KAAKE,MAAQL,EACbG,KAAKG,MAAQ,KACbH,KAAKI,OAAQ,EAjBjBC,OAAOC,QAAUV,4BACjB,IAAIW,oBAAqBC,QAAQ,mBAkB7BC,QAAOC,SAMPd,6BAA6Be,UAAUD,OAAOE,UAAY,WACtD,MAAOZ,QAUfJ,6BAA6Be,UAAUE,KAAO,WAC1C,GAAIb,KAAKI,MACL,MAAO,IAAIG,oBAAmBO,QAAW,EAE7C,IAAIC,GAAWf,KAAKG,MAChBa,EAAWhB,KAAKC,KACpB,KAAKc,EAAU,CACX,IAAKf,KAAKE,MAAMe,IAEZ,MADAjB,MAAKI,OAAQ,EACN,GAAIG,oBAAmBO,QAAW,EAG7C,QADAd,KAAKG,MAAQY,EAAWf,KAAKE,MAAMgB,KAC3BF,GACR,IAAK,IACD,MAAO,IAAIT,oBAAmBQ,EAAY,GAAG,EACjD,KAAK,IACD,MAAO,IAAIR,oBAAmBQ,EAAY,GAAG,EACjD,KAAK,IACD,MAAO,IAAIR,qBACPQ,EAAY,EACZA,EAAY,IACb,IAGX,GAAIA,EAAY,EAAG,CAEf,IADAA,EAAWA,EAAY,EAChBA,EAAY,GACfA,EAAWA,EAAY,CAG3B,QADAf,KAAKG,MAAQY,EACLC,GACR,IAAK,IACD,MAAO,IAAIT,oBAAmBQ,EAAY,GAAG,EACjD,KAAK,IACD,MAAO,IAAIR,oBAAmBQ,EAAY,GAAG,EACjD,KAAK,IACD,MAAO,IAAIR,qBACPQ,EAAY,EACZA,EAAY,IACb,IAGX,IAAKA,EAAY,EAEb,MADAf,MAAKI,OAAQ,EACN,GAAIG,oBAAmBO,QAAW,EAE7C,MAAOC,EAAY,EAAK,IAAMA,GAE1B,GADAA,EAAWA,EAAY,GAClBA,EAAY,EAEb,MADAf,MAAKI,OAAQ,EACN,GAAIG,oBAAmBO,QAAW,EAIjD,QADAd,KAAKG,MAAQY,EAAWA,EAAY,EAC5BC,GACR,IAAK,IACD,MAAO,IAAIT,oBAAmBQ,EAAY,GAAG,EACjD,KAAK,IACD,MAAO,IAAIR,oBAAmBQ,EAAY,GAAG,EACjD,KAAK,IACD,MAAO,IAAIR,qBACPQ,EAAY,EACZA,EAAY,IACb","file":"Iterator.js","sourceRoot":"/source/","sourcesContent":["module.exports = BinarySearchTreeIterator;\n\nvar IteratorResult = require('./IteratorResult');\n\n/**\n * Binary search tree iterator\n *\n * @param tree Binary Search tree\n * @param type Type of iteration result\n * @constructor\n */\nfunction BinarySearchTreeIterator(tree, type) {\n    type = type || 'v';\n\n    if (type !== 'k' && type !== 'v' && type !== 'e') {\n        throw new Error('Incorrect binary search tree iterator type \"' + type + '\"!');\n    }\n\n    this._type = type;\n    this._tree = tree;\n    this._last = null;\n    this._done = false;\n}\n\n\n\nif (global.Symbol) {\n    /**\n     * Iterator must return itself as its iterator\n     *\n     * @returns this iterator\n     */\n    BinarySearchTreeIterator.prototype[Symbol.iterator] = function() {\n        return this;\n    };\n}\n\n/**\n * Iterates to the next node and returns its value.\n *\n * @returns Object of { value: , done } where:\n *              * value: value of the next node\n *              * done:  true if the next node is last, false otherwise\n */\nBinarySearchTreeIterator.prototype.next = function() {\n    if (this._done) {\n        return new IteratorResult(undefined, true);\n    }\n\n    var node = this._last;\n    var type = this._type;\n\n    if (!node) {\n        if (!this._tree.min) {\n            this._done = true;\n            return new IteratorResult(undefined, true);\n        }\n\n        this._last = node = this._tree._min;\n        switch (type) {\n            case 'k': return new IteratorResult(node['k'], false);\n            case 'v': return new IteratorResult(node['v'], false);\n            case 'e': return new IteratorResult([node['k'], node['v']], false);\n        }\n    }\n\n    if (node['r']) {\n        node = node['r'];\n\n        while (node['l']) {\n            node = node['l'];\n        }\n\n        this._last = node;\n        switch (type) {\n            case 'k': return new IteratorResult(node['k'], false);\n            case 'v': return new IteratorResult(node['v'], false);\n            case 'e': return new IteratorResult([node['k'], node['v']], false);\n        }\n    }\n\n    if (!node['p']) {\n        this._done = true;\n        return new IteratorResult(undefined, true);\n    }\n\n    while (node['p']['l'] !== node) {\n        node = node['p'];\n\n        if (!node['p']) {\n            this._done = true;\n            return new IteratorResult(undefined, true);\n        }\n    }\n\n    this._last = node = node['p'];\n    switch (type) {\n        case 'k': return new IteratorResult(node['k'], false);\n        case 'v': return new IteratorResult(node['v'], false);\n        case 'e': return new IteratorResult([node['k'], node['v']], false);\n    }\n};"]}